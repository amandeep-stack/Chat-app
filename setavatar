import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import loader from '../assets/loader.gif';
import "react-toastify/ReactToastify.css";
import { setAvatarRoutes } from '../utils/API-routes';
import { Buffer } from 'buffer';

export const SetAvatar = () => {
    const api = 'https://api.multiavatar.com/456789457';
    const navigate = useNavigate();
    const [avatars, setAvatars] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [selectedAvatar, setSelectedAvatar] = useState(undefined);

    const toastOptions = {
        position: "bottom-right",
        autoClose: 8000,
        pauseOnHover: true,
        draggable: true,
        theme: 'dark'
    };

    useEffect(() => {
        if (!localStorage.getItem('chat-app-user')) {
            navigate('/login');
        }
    }, []);

    useEffect(() => {
        const gettingAvatar = async () => {
            try {
                const data = [];
                for (let i = 0; i < 4; i++) {
                    const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`, { responseType: 'arraybuffer' });
                    const buffer = Buffer.from(image.data, 'binary').toString('base64');
                    data.push(buffer);
                }
                setAvatars(data);
                setIsLoading(false);
            } catch (error) {
                console.error("Error fetching avatars:", error);
                setIsLoading(false);
                toast.error('Error fetching avatars. Please try again.', toastOptions);
            }
        };
        gettingAvatar();
    }, []);

    const setProfilePicture = async () => {
        if (selectedAvatar === undefined) {
            toast.error('Please select an avatar', toastOptions);
        } else {
            try {
                const user = JSON.parse(localStorage.getItem('chat-app-user'));
                const { data } = await axios.post(`${setAvatarRoutes}/${user._id}`, {
                    image: avatars[selectedAvatar]
                });
                if (data.isSet) {
                    user.isAvatarImageSet = true;
                    user.avatarImage = data.image;
                    localStorage.setItem('chat-app-user', JSON.stringify(user));
                    navigate('/');
                } else {
                    toast.error('Error setting avatar. Please try again', toastOptions);
                }
            } catch (error) {
                console.error("Error setting profile picture:", error);
                toast.error('Error setting profile picture. Please try again.', toastOptions);
            }
        }
    };

    return (
        <>
            {isLoading ? (
                <div className='bg-gray-800 flex h-screen justify-center items-center'>
                    <img src={loader} alt='loader' />
                </div>
            ) : (
                <div className='container bg-gray-800 justify-center h-screen flex flex-col items-center gap-14'>
                    <div className='title-container'>
                        <h1 className='text-6xl text-white'>Pick an avatar as your profile picture</h1>
                    </div>
                    <div className='avatars flex gap-8'>
                        {avatars.map((avatar, index) => (
                            <div key={index} className={`avatar ${selectedAvatar === index ? "border-blue-600 p-2 border-4 rounded-full" : ""}`}>
                                <img className='h-[13vh]' src={`data:image/svg+xml;base64,${avatar}`} alt='avatar'
                                    onClick={() => setSelectedAvatar(index)}
                                />
                            </div>
                        ))}
                    </div>
                    <button className='bg-cyan-600 transition-all ease-linear duration-200 text-white rounded-md hover:bg-blue-600 px-8 py-2' onClick={setProfilePicture}>Set as profile picture</button>
                </div>
            )}
            <ToastContainer />
        </>
    );
};

